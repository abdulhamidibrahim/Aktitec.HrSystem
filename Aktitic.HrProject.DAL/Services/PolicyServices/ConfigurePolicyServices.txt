using System.Security.Claims;
using Aktitic.HrProject.DAL.Context;
using Microsoft.AspNetCore.Authorization;
using Microsoft.Extensions.DependencyInjection;

namespace Aktitic.HrProject.DAL.Services.PolicyServices;

public class ConfigurePolicyServices
{
    public void ConfigureServices(IServiceCollection services)
    {
        services.AddAuthorization(options =>
        {
            options.AddPolicy("CanReadPolicy", policy =>
                policy.RequireAssertion(context => HasPermission(context, "Read")));

            options.AddPolicy("CanWritePolicy", policy =>
                policy.RequireAssertion(context => HasPermission(context, "Write")));

            options.AddPolicy("CanDeletePolicy", policy =>
                policy.RequireAssertion(context => HasPermission(context, "Delete")));

            options.AddPolicy("CanExportPolicy", policy =>
                policy.RequireAssertion(context => HasPermission(context, "Export")));

            options.AddPolicy("CanImportPolicy", policy =>
                policy.RequireAssertion(context => HasPermission(context, "Import")));
        });
    }

    private bool HasPermission(AuthorizationHandlerContext context, string permissionType)
    {
        var userId = context.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (userId == null) return false;

        // Fetch user role and permissions from the database
        using var dbContext = new HrSystemDbContext();
        var userPermissions = dbContext.CompanyRoles
            .Where(up => up.UserId == Convert.ToInt32(userId))
            .Select(up => up.RolePermissions)
            .Select(up => new { up.PermissionType, up.PageCode })
            .ToList();

        if (!userPermissions.Any()) return false;

        return permissionType switch
        {
            "Read" => role.CanRead,
            "Write" => role.CanWrite,
            "Delete" => role.CanDelete,
            "Export" => role.CanExport,
            "Import" => role.CanImport,
            _ => false
        };
    }
}